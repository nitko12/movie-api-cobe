{"version":3,"sources":["components/FilmCard.tsx","scripts/dataApi.ts","components/GlobalNavbar.tsx","components/Modal.tsx","Main.tsx","Info.tsx","serviceWorker.ts","index.tsx"],"names":["useStyles","makeStyles","root","width","container","margin","badgeText","fontSize","title","height","ImgMediaCard","props","classes","className","Badge","badgeContent","rating","color","Card","onClick","onclick","CardActionArea","transitionDuration","CardMedia","component","alt","image","img","CardContent","Typography","gutterBottom","variant","lang","CardActions","Button","size","APIkey","Getter","count","fetch","this","then","res","json","catch","err","console","log","id","genreId","theme","createStyles","flexGrow","menuButton","marginRight","spacing","GlobalNavbar","AppBar","position","Toolbar","IconButton","edge","aria-label","dataApi","fab","bottom","right","dialog","DialogTitle","withStyles","padding","closeButton","top","palette","grey","children","onClose","other","disableTypography","DialogContent","flex","alignContent","MuiDialogContent","DialogActions","MuiDialogActions","Modal","React","useState","open","setOpen","selected","setSelected","genres","setGenres","handleGenreChange","event","target","value","handleClose","useEffect","a","getGenres","data","onChange","map","el","type","name","fetchData","Fab","Dialog","aria-labelledby","dividers","autoFocus","getGenreId","list","results","onRoll","Math","floor","random","length","App","display","cardWrapper","flexDirection","flexWrap","loadingButtonContainer","justifyContent","alignItems","paddingBlockEnd","withRouter","Array","setData","getPopular","item","history","push","vote_average","backdrop_path","original_language","newData","cookies","Cookies","card","media","desc","grid","marginTop","match","params","String","overview","original_title","popularity","Number","production_companies","setValue","getId","get","parseFloat","delay","Grid","xs","Rating","e","v","prev","set","max","precision","i","join","Boolean","window","location","hostname","ReactDOM","render","StrictMode","exact","path","Info","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.80400f7e.chunk.js","sourcesContent":["import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Card from \"@material-ui/core/Card\";\nimport CardActionArea from \"@material-ui/core/CardActionArea\";\nimport CardActions from \"@material-ui/core/CardActions\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport CardMedia from \"@material-ui/core/CardMedia\";\nimport Button from \"@material-ui/core/Button\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Badge from \"@material-ui/core/Badge\";\nimport FadeIn from \"react-fade-in\";\n\nconst useStyles = makeStyles({\n  root: {\n    width: \"300px\",\n  },\n  container: { margin: \"40px\" },\n  badgeText: { fontSize: \"15px\" },\n  title: { height: \"75px\" },\n});\n\nexport default function ImgMediaCard(props: {\n  rating: string;\n  title: string;\n  img: string;\n  lang: string;\n  onclick: Function;\n}) {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.container}>\n      <Badge\n        className={classes.root}\n        badgeContent={<span className={classes.badgeText}>{props.rating}</span>}\n        color=\"primary\"\n      >\n        <Card className={classes.root} onClick={() => props.onclick()}>\n          <CardActionArea>\n            <FadeIn transitionDuration={600}>\n              <div>\n                <CardMedia\n                  component=\"img\"\n                  alt=\"Contemplative Reptile\"\n                  height=\"140\"\n                  image={`https://image.tmdb.org/t/p/w500/${props.img}`}\n                  title=\"Contemplative Reptile\"\n                />\n              </div>\n            </FadeIn>\n            <CardContent>\n              <Typography\n                gutterBottom\n                variant=\"h5\"\n                component=\"h2\"\n                className={classes.title}\n              >\n                {props.title}\n              </Typography>\n              <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n                Language: {props.lang}\n              </Typography>\n            </CardContent>\n          </CardActionArea>\n          <CardActions>\n            <Button size=\"small\" color=\"primary\">\n              Share\n            </Button>\n            <Button size=\"small\" color=\"primary\">\n              Learn More\n            </Button>\n          </CardActions>\n        </Card>\n      </Badge>\n    </div>\n  );\n}\n","const APIkey: String = \"fb871137332d87f42359150b11d2453e\";\n\nexport class Getter {\n  count: number = 1;\n  getPopular() {\n    return fetch(\n      `https://api.themoviedb.org/3/movie/popular?api_key=${APIkey}&page=${this.count}`\n    )\n      .then((res: any) => {\n        this.count += 1;\n        return res.json();\n      })\n      .catch((err: Object) => {\n        console.log(err);\n      });\n  }\n  getId(id: string) {\n    return fetch(`https://api.themoviedb.org/3/movie/${id}?api_key=${APIkey}`)\n      .then((res: any) => {\n        return res.json();\n      })\n      .catch((err: Object) => {\n        console.log(err);\n      });\n  }\n  getGenres() {\n    return fetch(\n      `https://api.themoviedb.org/3/genre/movie/list?api_key=${APIkey}&language=en-US`\n    )\n      .then((res: any) => {\n        return res.json();\n      })\n      .catch((err: Object) => {\n        console.log(err);\n      });\n  }\n  getGenreId(genreId: String) {\n    return fetch(\n      `https://api.themoviedb.org/3/discover/movie?api_key=${APIkey}&with_genres=${genreId}&language=en-US`\n    )\n      .then((res: any) => {\n        return res.json();\n      })\n      .catch((err: Object) => {\n        console.log(err);\n      });\n  }\n}\n","import React from \"react\";\nimport { makeStyles, createStyles } from \"@material-ui/core/styles\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Typography from \"@material-ui/core/Typography\";\n\nconst useStyles = makeStyles((theme: any) =>\n  createStyles({\n    root: {\n      flexGrow: 1,\n    },\n    menuButton: {\n      marginRight: theme.spacing(2),\n    },\n    title: {\n      flexGrow: 1,\n    },\n  })\n);\n\nexport default function GlobalNavbar() {\n  const classes = useStyles();\n\n  return (\n    <AppBar position=\"static\">\n      <Toolbar>\n        <IconButton\n          edge=\"start\"\n          className={classes.menuButton}\n          color=\"inherit\"\n          aria-label=\"menu\"\n        ></IconButton>\n        <Typography variant=\"h6\" className={classes.title}>\n          Filmovi\n        </Typography>\n      </Toolbar>\n    </AppBar>\n  );\n}\n","import React, { useEffect, useState } from \"react\";\nimport {\n  createStyles,\n  Theme,\n  withStyles,\n  WithStyles,\n  makeStyles,\n} from \"@material-ui/core/styles\";\nimport Button from \"@material-ui/core/Button\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport MuiDialogTitle from \"@material-ui/core/DialogTitle\";\nimport MuiDialogContent from \"@material-ui/core/DialogContent\";\nimport MuiDialogActions from \"@material-ui/core/DialogActions\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Fab from \"@material-ui/core/Fab\";\nimport ShuffleIcon from \"@material-ui/icons/Shuffle\";\nimport { Getter } from \"../scripts/dataApi\";\n\nconst dataApi = new Getter();\n\nconst useStyles = makeStyles({\n  fab: {\n    position: \"fixed\",\n    bottom: \"25px\",\n    right: \"25px\",\n  },\n  dialog: {\n    width: \"100%\",\n  },\n});\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    root: {\n      margin: 0,\n      padding: theme.spacing(2),\n    },\n    closeButton: {\n      position: \"absolute\",\n      right: theme.spacing(1),\n      top: theme.spacing(1),\n      color: theme.palette.grey[500],\n    },\n  });\n\nexport interface DialogTitleProps extends WithStyles<typeof styles> {\n  id: string;\n  children: React.ReactNode;\n  onClose: () => void;\n}\n\nconst DialogTitle = withStyles(styles)((props: DialogTitleProps) => {\n  const { children, classes, onClose, ...other } = props;\n  return (\n    <MuiDialogTitle disableTypography className={classes.root} {...other}>\n      <Typography variant=\"h6\">{children}</Typography>\n      {onClose ? (\n        <IconButton\n          aria-label=\"close\"\n          className={classes.closeButton}\n          onClick={onClose}\n        >\n          <CloseIcon />\n        </IconButton>\n      ) : null}\n    </MuiDialogTitle>\n  );\n});\n\nconst DialogContent = withStyles((theme: Theme) => ({\n  root: {\n    width: \"350px\",\n    flex: 1,\n    alignContent: \"center\",\n    padding: theme.spacing(2),\n  },\n}))(MuiDialogContent);\n\nconst DialogActions = withStyles((theme: Theme) => ({\n  root: {\n    margin: 0,\n    padding: theme.spacing(1),\n  },\n}))(MuiDialogActions);\n\nexport default function Modal(props: any) {\n  const [open, setOpen] = React.useState(false);\n  const [selected, setSelected] = useState(\"-1\");\n  const [genres, setGenres] = React.useState(<div></div>);\n\n  const handleGenreChange = (event: any) => {\n    console.log(event.target.value);\n    setSelected(event.target.value);\n  };\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const handleRoll = () => {\n    if (selected != \"-1\") {\n      dataApi.getGenreId(selected).then((data) => {\n        let list = data.results;\n\n        props.onRoll(\n          list[Math.floor(Math.random() * list.length)].id as String\n        );\n      });\n    }\n  };\n  const classes = useStyles();\n\n  useEffect(() => {\n    const fetchData = async () => {\n      dataApi.getGenres().then((data: any) => {\n        setGenres(\n          <div onChange={handleGenreChange}>\n            {data.genres.map((el: any) => {\n              return (\n                <div>\n                  <input type=\"radio\" value={el.id} name=\"gender\" />\n                  {\"  \" + el.name}\n                </div>\n              );\n            })}\n          </div>\n        );\n      });\n    };\n    fetchData();\n  }, []);\n\n  return (\n    <div>\n      <div onClick={handleClickOpen}>\n        <Fab color=\"primary\" aria-label=\"random\" className={classes.fab}>\n          <ShuffleIcon />\n        </Fab>\n      </div>\n      <Dialog\n        onClose={handleClose}\n        aria-labelledby=\"customized-dialog-title\"\n        open={open}\n        className={classes.dialog}\n      >\n        <DialogTitle id=\"form-dialog-title\" onClose={handleClose}>\n          Movie Roulette\n        </DialogTitle>\n        <DialogContent dividers>\n          <Typography gutterBottom variant=\"h6\">\n            Select Genre\n          </Typography>\n\n          {genres}\n        </DialogContent>\n        <DialogActions>\n          <Button autoFocus onClick={handleRoll} color=\"primary\">\n            Roll\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n}\n","import React, { useEffect, useState } from \"react\";\nimport FilmCard from \"./components/FilmCard\";\n\nimport { Getter } from \"./scripts/dataApi\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport GlobalNavbar from \"./components/GlobalNavbar\";\nimport Button from \"@material-ui/core/Button\";\n\nimport { withRouter } from \"react-router-dom\";\nimport Modal from \"./components/Modal\";\n\nconst dataApi = new Getter();\n\nconst useStyles = makeStyles({\n  App: {\n    display: \"flex\",\n    width: \"100%\",\n    height: \"100%\",\n  },\n  cardWrapper: {\n    display: \"flex\",\n    flexDirection: \"row\",\n    flexWrap: \"wrap\",\n    margin: \"20px\",\n  },\n  loadingButtonContainer: {\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    paddingBlockEnd: \"30px\",\n  },\n});\n\nfunction App(props: any) {\n  const classes = useStyles();\n  const [data, setData] = useState(new Array());\n\n  useEffect(() => {\n    const fetchData = async () => {\n      dataApi.getPopular().then((data: any) => {\n        setData(data.results);\n      });\n    };\n    fetchData();\n  }, []);\n\n  const loadMore = () => {\n    dataApi.getPopular().then((newData: { results: Array<any> }) => {\n      setData([...data, ...newData.results]);\n    });\n  };\n\n  return (\n    <div className=\"App\">\n      <GlobalNavbar />\n      <div className={classes.cardWrapper}>\n        {data.map((item: any) => (\n          <div>\n            <FilmCard\n              onclick={() => {\n                props.history.push(`/info/${item.id}`);\n              }}\n              rating={item.vote_average}\n              title={item.title}\n              img={item.backdrop_path}\n              lang={item.original_language}\n            />\n          </div>\n        ))}\n      </div>\n      <div className={classes.loadingButtonContainer}>\n        <Button variant=\"contained\" onClick={loadMore}>\n          Load more\n        </Button>\n      </div>\n\n      <Modal onRoll={(id: string) => props.history.push(`/info/${id}`)} />\n    </div>\n  );\n}\n\nexport default withRouter(App);\n","import React, { useState, useEffect } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Card from \"@material-ui/core/Card\";\nimport CardActionArea from \"@material-ui/core/CardActionArea\";\nimport CardActions from \"@material-ui/core/CardActions\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport CardMedia from \"@material-ui/core/CardMedia\";\nimport Button from \"@material-ui/core/Button\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { withRouter } from \"react-router-dom\";\nimport { Getter } from \"./scripts/dataApi\";\nimport FadeIn from \"react-fade-in\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Rating from \"@material-ui/lab/Rating\";\nimport Cookies from \"universal-cookie\";\n\nconst cookies = new Cookies();\nconst dataApi = new Getter();\n\nconst useStyles = makeStyles({\n  root: {\n    flex: 1,\n    width: \"100%\",\n    height: \"100%\",\n    justifyContent: \"center\",\n    alignContent: \"center\",\n  },\n  card: {\n    flex: 1,\n    width: \"95%\",\n    height: \"95%\",\n    margin: \"0 auto\",\n  },\n  media: {\n    height: 140,\n  },\n  desc: {\n    flex: 1,\n    flexDirection: \"row\",\n    alignContent: \"center\",\n    alignItems: \"center\",\n    height: \"100%\",\n  },\n  grid: {\n    flex: 1,\n    justifyContent: \"center\",\n    alignContent: \"center\",\n    marginTop: \"15px\",\n    height: \"100%\",\n  },\n});\n\nfunction Info(props: any) {\n  const classes = useStyles();\n  const id = props.match.params.id;\n\n  const [data, setData] = useState({\n    backdrop_path: String,\n    overview: String,\n    original_title: String,\n    popularity: Number,\n    original_language: String,\n    production_companies: [{ name: String }],\n  });\n\n  const [value, setValue] = useState<number | null>(2);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      dataApi.getId(id).then((newData: any) => {\n        if (cookies.get(\"rating\"))\n          newData.vote_average = parseFloat(cookies.get(\"rating\"));\n        setValue(newData.vote_average);\n        setData(newData);\n      });\n    };\n    fetchData();\n  }, []);\n\n  const rateHandler = (e: any, v: any) => {\n    setData((prev) => {\n      let newData = prev;\n      setValue(v);\n      return newData;\n    });\n    cookies.set(\"rating\", v);\n  };\n\n  return (\n    <Card className={classes.card}>\n      <CardActionArea className={classes.desc}>\n        <FadeIn transitionDuration={1000} delay={300}>\n          <div>\n            <CardMedia\n              component=\"img\"\n              alt=\"Contemplative Reptile\"\n              height=\"400\"\n              image={`https://image.tmdb.org/t/p/original/${data.backdrop_path}`}\n              title=\"image\"\n            />\n          </div>\n          <div>\n            <CardContent className={classes.desc}>\n              <Typography gutterBottom variant=\"h5\" component=\"h2\">\n                {data.original_title}\n              </Typography>\n              <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n                {data.overview}\n                <Grid className={classes.grid} container spacing={1}>\n                  <Grid container item xs={3} spacing={1}>\n                    <Rating\n                      name=\"hover-feedback\"\n                      value={value}\n                      onChange={rateHandler}\n                      max={10}\n                      precision={0.25}\n                    />\n                  </Grid>\n                  <Grid container item xs={3} spacing={1}>\n                    Popularity: {data.popularity}\n                  </Grid>\n                  <Grid container item xs={3} spacing={1}>\n                    Language: {data.original_language}\n                  </Grid>\n                  <Grid container item xs={3} spacing={1}>\n                    Production companies:{\" \"}\n                    {data.production_companies.map((i) => i.name).join(\", \")}\n                  </Grid>\n                </Grid>\n              </Typography>\n            </CardContent>\n          </div>\n        </FadeIn>\n      </CardActionArea>\n    </Card>\n  );\n}\n\nexport default withRouter(Info);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./Main\";\nimport Info from \"./Info\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <Switch>\n        <Route exact path=\"/\" component={App}></Route>\n        <Route path=\"/info/:id\" component={Info}></Route>\n      </Switch>\n    </Router>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}